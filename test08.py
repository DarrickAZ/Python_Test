print('##########################################错误、调试和测试#################################################')
# 错误、调试和测试
# 在程序运行过程中，总会遇到各种各样的错误。
# 有的错误是程序编写有问题造成的，比如本来应该输出整数结果输出了字符串，这
# 种错误我们通常称之为bug，bug是必须修复的。
# 有的错误是用户输入造成的，比如让用户输入email地址，结果得到一个空字符串，
# 这种错误可以通过检查用户输入来做相应的处理。
# 还有一类错误是完全无法在程序运行过程中预测的，比如写入文件的时候，磁盘满
# 了，写不进去了，或者从网络抓取数据，网络突然断掉了。这类错误也称为异常，
# 在程序中通常是必须处理的，否则，程序会因为各种问题终止并退出。
# Python内置了一套异常处理机制，来帮助我们进行错误处理。
# 此外，我们也需要跟踪程序的执行，查看变量的值是否正确，这个过程称为调试。
# Python的pdb可以让我们以单步方式执行代码。
# 最后，编写测试也很重要。有了良好的测试，就可以在程序修改后反复运行，确保
# 程序输出符合我们编写的测试。
print('------------------------------------错误处理----------------------------------')
# 在程序运行的过程中，如果发生了错误，可以事先约定返回一个错误代码，这样，
# 就可以知道是否有错，以及出错的原因。在操作系统提供的调用中，返回错误码非
# 常常见。比如打开文件的函数 open()  ，成功时返回文件描述符（就是一个整
# 数），出错时返回 -1  。
# 用错误码来表示是否出错十分不便，因为函数本身应该返回的正常结果和错误码混
# 在一起，造成调用者必须用大量的代码来判断是否出错：
# def foo():
#     r=some_function()
#     if r==(-1):
#         return (-1)
#     #do something
#     return r
#
# def bar():
#     r=foo()
#     if r==(-1):
#         print('Error')
#     else:
#         pass
# 一旦出错，还要一级一级上报，直到某个函数可以处理该错误（比如，给用户输出
# 一个错误信息）。
# 所以高级语言通常都内置了一套 try...except...finally...  的错误处理机
# 制，Python也不例外

print('------------------------------------try----------------------------------')
# try
# 让我们用一个例子来看看 try  的机制：
try:
    print('try...')
    r = 10/0
    print('result:',r)
except ZeroDivisionError as e:
    print('except:',e)
finally:
    print('finally...')
print('END')
# 当我们认为某些代码可能会出错时，就可以用 try  来运行这段代码，如果执行出
# 错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即 except  语句
# 块，执行完 except  后，如果有 finally  语句块，则执行 finally  语句块，至
# 此，执行完毕。
# 上面的代码在计算 10 / 0  时会产生一个除法运算错误：
# try...
# except: division by zero
# finally...
# END
# 从输出可以看到，当错误发生时，后续语句 print('result:', r)  不会被执
# 行， except  由于捕获到 ZeroDivisionError  ，因此被执行。最
# 后， finally  语句被执行。然后，程序继续按照流程往下走。
# 如果把除数 0  改成 2  ，则执行结果如下:
# try...
# except: division by zero
# finally...
# END

# 由于没有错误发生，所以 except  语句块不会被执行，但是 finally  如果有，则
# 一定会被执行（可以没有 finally  语句）。
# 廖雪峰 JavaScript Python Git 教程
# 1011 错误处理
# 你还可以猜测，错误应该有很多种类，如果发生了不同类型的错误，应该由不同
# 的 except  语句块处理。没错，可以有多个 except  来捕获不同类型的错误：

# try:
# print('try...')
# r = 10 / int('a')
# print('result:', r)
# except ValueError as e:
# print('ValueError:', e)
# except ZeroDivisionError as e:
# print('ZeroDivisionError:', e)
# finally:
# print('finally...')
# print('END')












































